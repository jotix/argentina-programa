#+TITLE: Práctico Nro.3.3: Tipos de Dato Colección - Conjunto
#+AUTHOR: Juan Jose Della Vecchia
#+STARTUP: overview

Nota: Asuma una cantidad especíca de elementos cuando el ejercicio no lo
especique.

* Ejercicio 1:
Escriba un programa que:
1. Defiena el conjunto universal el cual contiene las provincias de Ar-
gentina.
2. Pida al usuario una provincia.
3. Calcule el complemento del conjunto single que contiene la pro-
vincia ingresada por el usuario.
#+begin_src python
provincias = {"Buenos Aires", "CABA", "Catamarca", "Chaco", "Chubit", 
	      "Cordoba", "Corrientes", "Entre Rios", "Formosa", "Jujuy",
	      "La Pampa", "La Rioja", "Mendoza", "Misiones", "Neuquen",
	      "Rio Negro", "Salta", "San Juan", "San Luis", "Santa Cruz",
	      "Santiago del Estero", "Tierra del Fuego", "Tucuman"}

prov = input("Ingrese una provincia: ")
complemento = provincias - {prov,}
print("Complemento:", complemento)
#+end_src

* Ejercicio 2:
Escriba un programa que:
1. Defina el conjunto universal U el cual está compuesto por los nú-
meros del 1 al 20.
2. Pida al usuario dos conjuntos A y B.
3. Calcule la unión de A y B.
4. Calcule la intersección de A y B.
5. Calcule el complemento de las unión e intersección de A y B.
#+begin_src python
# punto 1
U = set(range(1,21))
print(U)
# punto 2
aux1 = input("Ingrese el conjunto A, separe los elementos con comas: ") 
aux2 = input("Ingrese el conjunto B, separe los elementos con comas: ") 
A = set(aux1.split(","))
B = set(aux2.split(","))
# punto 3
union = A | B
# punto 4
interseccion = A & B
# punto 5
comp_union_inter = union - interseccion
# imprimir resultados
print("Union A | B:", union)
print("Interseccion A & B:", interseccion)
print("Complemento de la union e interseccion:", comp_union_inter)
#+end_src

* Ejercicio 3:
Realice las siguientes actividades en caso de que sea posible:
1. Pase un conjunto a un diccionario.
2. Pase un conjunto a un conjunto congelado.
3. Pase un conjunto a una lista.
4. Ordene un conjunto.
5. Pase un conjunto a una tupla.
#+begin_src python
A = {5, 2, 3, 1, 4}
print("Conjunto:", A)

# Punto 1, no se puede
# dicc = dict(A) # error

# Punto 2
frozenA = frozenset(A)
print("Convertido a conjunto congelado:", frozenA)

# Punto 3
lista = list(A)
print("Convertido a lista:", lista)

# Punto 4
Aordenado = sorted(A)
print("Conjunto ordenado:", Aordenado) # lo ordena y transforma a una lista

# Punto 5
tupla = tuple(A)
print("Convertido a tupla:", tupla)
#+end_src

* Ejercicio 4:
Escriba un programa que a partir de dos conjuntos de números
enteros ingresados por el usuario cree el conjunto universal el cual está
formado por todos los números que pertenecen a los conjuntos usados
en el programa.
#+begin_src python
aux1 = input("Ingrese el conjunto A, separe los elementos con comas: ") 
aux2 = input("Ingrese el conjunto B, separe los elementos con comas: ") 
A = set(map(lambda elem: int(elem), aux1.split(",")))
B = set(map(lambda elem: int(elem), aux2.split(",")))
C = A | B
print("Conjunto A:", A)
print("Conjunto B:", B)
print("Conjunto C:", C)
#+end_src

* Ejercicio 5:
Escriba un programa que:
1. Ingrese un conjunto.
2. Imprima por pantalla: la cardinalidad, el mínimo y el máximo.
#+begin_src python
aux1 = input("Ingrese el conjunto A, separe los elementos con comas: ") 
A = set(map(lambda elem: int(elem), aux1.split(",")))
print("Cardinalidad de A:", len(A))
print("Mínimo elemento de A:", min(A))
print("Máximo elemento de A:", max(A))
#+end_src

* Ejercicio 6:
Escriba un programa que permita que el usuario ingrese un
conjunto y un valor. El programa debe informar si valor pertenece a
conjunto.
#+begin_src python
aux1 = input("Ingrese el conjunto A, separe los elementos con comas: ") 
A = set(aux1.split(","))
e = input("Ingrese un elemento para buscar dentro de A: ")
pertenece = e in A
print("El elemento", e, "NO" if not pertenece else "", "pertenece al conjunto", A)
#+end_src

* Ejercicio 7:
Escriba un programa que permita que el usuario ingrese un
conjunto y tres valores. El programa debe incorporar esos valores al
conjunto. Luego imprimir el conjunto resultado por pantalla.
#+begin_src python
aux1 = input("Ingrese el conjunto A, separe los elementos con comas: ") 
A = set(aux1.split(","))
for i in range (3):
    e = input("Ingrese un elemento para buscar agregar a A: ")
    A.add(e)

print("Conjunto resultante:", A)
#+end_src

* Ejercicio 8:
Se puede incorporar a un conjunto los elementos de una lista
sin utilizar iteraciones.
#+begin_src python
# si, se puede utilizando el método update
A = {1, 2, 3, 4}
l = [5, 6, 7, 8]
A.update(set(l))
print(A)
#+end_src

* Ejercicio 9:
Escriba un programa que permita que el usuario ingrese un
conjunto c y un valor v y si v está en c lo elimine de c. Luego imprima
c.
#+begin_src python
aux1 = input("Ingrese el conjunto A, separe los elementos con comas: ") 
c = set(aux1.split(","))
v = input("Ingrese un valor: ")
if v in c:
    c.remove(v)
print("Conjunto resultado:", c)
#+end_src

* Ejercicio 10:
Escriba un programa que:
1. Permita que el usuario ingrese un conjunto A.
2. Permita que el usuario ingrese un conjunto B.
3. Informe si A es un subconjunto de B o B es un subconjunto de A.
#+begin_src python
aux1 = input("Ingrese el conjunto A, separe los elementos con comas: ") 
aux2 = input("Ingrese el conjunto B, separe los elementos con comas: ") 
A = set(aux1.split(","))
B = set(aux2.split(","))
print("A es subconjunto de B:", A.issubset(B))
print("B es subconjunto de A:", B.issubset(A))
#+end_src
